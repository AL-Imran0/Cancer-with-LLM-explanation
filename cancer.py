# -*- coding: utf-8 -*-
"""Cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x8DjkMWgDiNx3RUcef3eA6BVrqUmChXW

Normal detection
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

np.random.seed(42)

num_patients = 1000

ages = np.random.normal(60, 10, num_patients).astype(int)
ages[ages < 20] = 20
tumor_sizes = np.random.gamma(shape=2, scale=3, size=num_patients)
tumor_sizes = np.clip(tumor_sizes, 1, 15)

cell_types = np.random.choice(['Adenocarcinoma', 'Squamous Cell Carcinoma', 'Small Cell Carcinoma'],
                               p=[0.5, 0.3, 0.2], size=num_patients)

stages = np.where(tumor_sizes > 8, 'IV',
                  np.where(tumor_sizes > 5, 'III',
                           np.where(ages > 70, 'III',
                                    np.random.choice(['I', 'II', 'III'],
                                                      p=[0.4, 0.4, 0.2], size=num_patients))))


survival_probabilities = 1 - (tumor_sizes / 15) * 0.7 - np.where(stages == 'IV', 0.2, 0)
survival_status = np.random.binomial(n=1, p=survival_probabilities, size=num_patients)
survival_status = np.where(survival_status == 1, 'Alive', 'Deceased')

data = pd.DataFrame({
    'Age': ages,
    'Tumor Size': tumor_sizes.round(2),
    'Cell Type': cell_types,
    'Stage': stages,
    'Survival_Status': survival_status
})

print("--- Generated Synthetic Cancer Data ---")
print(data.head())
print("\n")


sns.set_style("whitegrid")
sns.set_palette("muted")

plt.figure(figsize=(18, 12))

plt.subplot(2, 2, 1)
sns.kdeplot(data=data, x='Age', hue='Survival_Status', fill=True, common_norm=False, alpha=0.6)
plt.title('Age Distribution by Survival Status', fontsize=16, fontweight='bold')
plt.xlabel('Age (Years)', fontsize=12)
plt.ylabel('Density', fontsize=12)
plt.legend(title='Survival Status')
plt.tight_layout(pad=3.0)

plt.subplot(2, 2, 2)
sns.countplot(x='Cell Type', hue='Survival_Status', data=data)
plt.title('Patient Counts by Cell Type and Survival Status', fontsize=16, fontweight='bold')
plt.xlabel('Cell Type', fontsize=12)
plt.ylabel('Number of Patients', fontsize=12)
plt.xticks(rotation=15)
plt.tight_layout(pad=3.0)

plt.subplot(2, 2, 3)
sns.violinplot(x='Survival_Status', y='Tumor Size', data=data)
plt.title('Tumor Size Distribution by Survival Status', fontsize=16, fontweight='bold')
plt.xlabel('Survival Status', fontsize=12)
plt.ylabel('Tumor Size (cm)', fontsize=12)
plt.tight_layout(pad=3.0)


plt.subplot(2, 2, 4)
sns.scatterplot(x='Age', y='Tumor Size', hue='Survival_Status', data=data, alpha=0.7, s=50)
plt.title('Age vs. Tumor Size, by Survival Status', fontsize=16, fontweight='bold')
plt.xlabel('Age (Years)', fontsize=12)
plt.ylabel('Tumor Size (cm)', fontsize=12)
plt.legend(title='Survival Status')
plt.tight_layout(pad=3.0)

plt.show()

!pip install -q transformers torch scikit-learn matplotlib seaborn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

import torch
from transformers import pipeline, set_seed

X, y = make_classification(n_samples=2000, n_features=10, n_informative=6,
                           n_redundant=2, n_classes=2, random_state=42)

df = pd.DataFrame(X, columns=[f"feature_{i}" for i in range(10)])
df["cancer"] = y

print("\nSample synthetic cancer data:\n", df.head())

X_train, X_test, y_train, y_test = train_test_split(df.drop("cancer", axis=1), df["cancer"],
                                                    test_size=0.25, random_state=42, stratify=df["cancer"])

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

clf = RandomForestClassifier(n_estimators=200, random_state=42)
clf.fit(X_train_scaled, y_train)
y_pred = clf.predict(X_test_scaled)

print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

plt.figure(figsize=(6,5))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues", xticklabels=["No Cancer","Cancer"], yticklabels=["No Cancer","Cancer"])
plt.title("Confusion Matrix")
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(df, x="feature_0", hue="cancer", bins=30, kde=True, palette="Set2")
plt.title("Feature 0 distribution (Cancer vs No Cancer)")
plt.show()

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(df.drop("cancer", axis=1))
plt.figure(figsize=(7,6))
plt.scatter(X_pca[:,0], X_pca[:,1], c=df["cancer"], cmap="coolwarm", alpha=0.5)
plt.title("PCA Visualization of Cancer vs Non-Cancer Patients")
plt.xlabel("PC1"); plt.ylabel("PC2")
plt.show()

generator = pipeline("text-generation", model="distilgpt2")
set_seed(42)

prompt = "Explain what features might represent in a synthetic cancer dataset with 10 features."
explanation = generator(prompt, max_length=80, num_return_sequences=1)[0]["generated_text"]
print("\nLLM Explanation of Features:\n", explanation)

sample_patient = X_test.iloc[0]
pred = clf.predict([X_test_scaled[0]])[0]
report_prompt = f"Patient has features {sample_patient.values}. Prediction: {'Cancer' if pred==1 else 'No Cancer'}. Generate a short medical-style report."
report = generator(report_prompt, max_length=100, num_return_sequences=1)[0]["generated_text"]
print("\nLLM-Generated Patient Report:\n", report)

print("\nSample AI-generated reports:")
for i in range(3):
    idx = np.random.randint(0, len(X_test))
    patient = X_test.iloc[idx]
    pred = clf.predict([X_test_scaled[idx]])[0]
    prompt = f"Patient features: {patient.values}. Model predicts {'Cancer' if pred==1 else 'No Cancer'}. Write a medical summary."
    summary = generator(prompt, max_length=80, num_return_sequences=1)[0]["generated_text"]
    print(f"\nReport {i+1}:\n", summary)